<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Where DFIR Meets IT</title>
    <link>https://forensicitguy.github.io/</link>
    <description>Recent content on Where DFIR Meets IT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://forensicitguy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Whitelisting Ld_preload for Fun and No Profit</title>
      <link>https://forensicitguy.github.io/posts/whitelisting-ld_preload-for-fun-and-no-profit/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/whitelisting-ld_preload-for-fun-and-no-profit/</guid>
      <description>If you’ve been around the Linux/BSD/Solaris/Other UNIX ecosystem for a while you’ve probably heard of the fabled LD_PRELOAD trick. If you haven’t heard of it, let me introduce you to one of the longest-held, dirty security issues in UNIX…
A Brief Look at LD_PRELOAD LD_PRELOAD is an environment variable used by the dynamic linker on UNIX-based systems. Normally the dynamic linker follows a specified search pattern to load various dynamic libraries (shared objects on UNIX).</description>
    </item>
    
    <item>
      <title>Adding Process Hiding to Merlin</title>
      <link>https://forensicitguy.github.io/posts/adding-process-hiding-to-merlin/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/adding-process-hiding-to-merlin/</guid>
      <description>Sometimes red team tools need a little bit of extra love to address certain platforms. As I researched Merlin for detection strategies on the blue team side, I noticed that it could use some extra functionality to help replicate what we see in the real world for Linux compromises.
One particular technique that fascinated me was the combination of LD_PRELOAD with libprocesshider to gain a little bit of rootkit functionality and hide processes from casual observers.</description>
    </item>
    
    <item>
      <title>Making Meterpreter Look Google Signed</title>
      <link>https://forensicitguy.github.io/posts/making-meterpreter-look-google-signed/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/making-meterpreter-look-google-signed/</guid>
      <description>In this post I’ll use some of the information made public by VirusTotal in a recent blog post and show how you can easily create a Metasploit Meterpreter payload and append it to a signed MSI file. This will allow you to leverage the code signing from the MSI file to make your payload appear legitimately signed by Google, Inc. After I’ll cover a bit of discussion on why this technique is dangerously significant and how to investigate for its use.</description>
    </item>
    
    <item>
      <title>My Sans Dfir NetWars Experience</title>
      <link>https://forensicitguy.github.io/posts/my-sans-dfir-netwars-experience/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/my-sans-dfir-netwars-experience/</guid>
      <description>At SANSFIRE 2018 in Washington, DC I had the awesome opportunity to compete in SANS DFIR NetWars with a coworker from Red Canary. This was my first experience with NetWars, and I wasn’t sure what to expect with the tournament. We heard that at SANSFIRE DFIR NetWars would allow team competition this time around, which is different from the previous individual-only competition. I went to a SANS@Night session titled “Intro to NetWars” given by Tim Medin of Red Siege Infosec fame with my coworker and our experience soon turned into a recruiting effort.</description>
    </item>
    
  </channel>
</rss>