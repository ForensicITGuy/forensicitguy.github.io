<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Where DFIR Meets IT</title>
    <link>https://forensicitguy.github.io/</link>
    <description>Recent content on Where DFIR Meets IT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Feb 2020 15:08:25 -0600</lastBuildDate>
    
	<atom:link href="https://forensicitguy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Road to RHCSA 8 - I/O Redirection, Piping, and Their Evil Uses</title>
      <link>https://forensicitguy.github.io/posts/road-to-rhcsa8-input-redirection/</link>
      <pubDate>Sat, 29 Feb 2020 15:08:25 -0600</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/road-to-rhcsa8-input-redirection/</guid>
      <description>Bourne-compatible Unix shells (bash, sh, etc.) usually include capabilities to redirect input and output in the shell. One of the basic objectives of RHCSA 8 is to learn how to manipulate input and output, and since I work in security I wanted to put a spin on the content to show how adversaries may use I/O redirection to stump defenders. If you already know about I/O redirection and you&amp;rsquo;re just here for the security stuff, jump forward here.</description>
    </item>
    
    <item>
      <title>Linux EDR Evasion With Meterpreter and LD_PRELOAD</title>
      <link>https://forensicitguy.github.io/posts/linux-edr-evasion-with-ld-preload/</link>
      <pubDate>Thu, 06 Feb 2020 16:06:16 -0600</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/linux-edr-evasion-with-ld-preload/</guid>
      <description>Everyone has their favorite adversary technique to research and mine is LD_PRELOAD process injection because it&amp;rsquo;s pretty versatile. It lets you hook functions to manipulate output, and it can also let you trip up defenders by injecting code into arbitrary processes for execution. In this post, I&amp;rsquo;ll walk through how an adversary might combine Meterpreter with LD_PRELOAD to hide malicious activity under a legitimate Linux system process.
The Setup To get started, I&amp;rsquo;m working with a Kali Linux machine as my attacker system and a CentOS 8 system as my victim.</description>
    </item>
    
    <item>
      <title>Exploiting Yum and DNF Plugins for Persistence</title>
      <link>https://forensicitguy.github.io/posts/exploiting-yum-dnf-plugins/</link>
      <pubDate>Mon, 13 Jan 2020 12:52:55 -0600</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/exploiting-yum-dnf-plugins/</guid>
      <description>Two Metasploit Framework modules have held my interest in the last few weeks: the ones for persistence using Linux package managers apt and Yum. While they require root privileges to exploit, they provide a novel persistence mechanism that is likely overlooked by defenders. While looking at these modules I noticed that persistence using DNF wasn’t included, and I set off to find a way to persist on Linux systems using DNF plugins.</description>
    </item>
    
    <item>
      <title>When Local Password Resets Aren&#39;t Local</title>
      <link>https://forensicitguy.github.io/posts/when-local-resets-arent-local/</link>
      <pubDate>Thu, 09 Jan 2020 22:07:01 -0600</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/when-local-resets-arent-local/</guid>
      <description>When You Reset a Domain Administrator Instead of Local During an IR engagement, one of my colleagues identified malicious activity where an adversary reset the password for a local administrator account. While this reset would gain the adversary access to the local administrator account, it might not have warranted an emergency. That is, until we noticed that the password reset occurred on a domain controller.
Are There Local Accounts on Domain Controllers?</description>
    </item>
    
    <item>
      <title>Road to RHCSA 8 - Getting Started</title>
      <link>https://forensicitguy.github.io/posts/road-to-rhcsa8-00/</link>
      <pubDate>Thu, 02 Jan 2020 21:06:20 -0600</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/road-to-rhcsa8-00/</guid>
      <description>Updated 2020-01-04 - Added the Red Hat Certs Slack group to the community list and lab environment to the lab list.
Choosing my educational goal for the year always causes a bit of anxiety. I try to find the right balance between something that is fun to learn and something that will help with my day job. Last year, the educational goal was to learn Volatility memory forensics better through a training class.</description>
    </item>
    
    <item>
      <title>Whitelisting LD_PRELOAD for Fun and No Profit</title>
      <link>https://forensicitguy.github.io/posts/whitelisting-ld_preload-for-fun-and-no-profit/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/whitelisting-ld_preload-for-fun-and-no-profit/</guid>
      <description>If you’ve been around the Linux/BSD/Solaris/Other UNIX ecosystem for a while you’ve probably heard of the fabled LD_PRELOAD trick. If you haven’t heard of it, let me introduce you to one of the longest-held, dirty security issues in UNIX…
A Brief Look at LD_PRELOAD LD_PRELOAD is an environment variable used by the dynamic linker on UNIX-based systems. Normally the dynamic linker follows a specified search pattern to load various dynamic libraries (shared objects on UNIX).</description>
    </item>
    
    <item>
      <title>Adding Process Hiding to Merlin</title>
      <link>https://forensicitguy.github.io/posts/adding-process-hiding-to-merlin/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/adding-process-hiding-to-merlin/</guid>
      <description>Sometimes red team tools need a little bit of extra love to address certain platforms. As I researched Merlin for detection strategies on the blue team side, I noticed that it could use some extra functionality to help replicate what we see in the real world for Linux compromises.
One particular technique that fascinated me was the combination of LD_PRELOAD with libprocesshider to gain a little bit of rootkit functionality and hide processes from casual observers.</description>
    </item>
    
    <item>
      <title>Making Meterpreter Look Google Signed</title>
      <link>https://forensicitguy.github.io/posts/making-meterpreter-look-google-signed/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/making-meterpreter-look-google-signed/</guid>
      <description>In this post I’ll use some of the information made public by VirusTotal in a recent blog post and show how you can easily create a Metasploit Meterpreter payload and append it to a signed MSI file. This will allow you to leverage the code signing from the MSI file to make your payload appear legitimately signed by Google, Inc. After I’ll cover a bit of discussion on why this technique is dangerously significant and how to investigate for its use.</description>
    </item>
    
    <item>
      <title>My Sans Dfir NetWars Experience</title>
      <link>https://forensicitguy.github.io/posts/my-sans-dfir-netwars-experience/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/my-sans-dfir-netwars-experience/</guid>
      <description>At SANSFIRE 2018 in Washington, DC I had the awesome opportunity to compete in SANS DFIR NetWars with a coworker from Red Canary. This was my first experience with NetWars, and I wasn’t sure what to expect with the tournament. We heard that at SANSFIRE DFIR NetWars would allow team competition this time around, which is different from the previous individual-only competition. I went to a SANS@Night session titled “Intro to NetWars” given by Tim Medin of Red Siege Infosec fame with my coworker and our experience soon turned into a recruiting effort.</description>
    </item>
    
  </channel>
</rss>