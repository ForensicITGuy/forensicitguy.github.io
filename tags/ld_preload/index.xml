<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ld_preload on Where DFIR Meets IT</title>
    <link>https://forensicitguy.github.io/tags/ld_preload/</link>
    <description>Recent content in ld_preload on Where DFIR Meets IT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://forensicitguy.github.io/tags/ld_preload/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Whitelisting LD_PRELOAD for Fun and No Profit</title>
      <link>https://forensicitguy.github.io/posts/whitelisting-ld_preload-for-fun-and-no-profit/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/whitelisting-ld_preload-for-fun-and-no-profit/</guid>
      <description>If you’ve been around the Linux/BSD/Solaris/Other UNIX ecosystem for a while you’ve probably heard of the fabled LD_PRELOAD trick. If you haven’t heard of it, let me introduce you to one of the longest-held, dirty security issues in UNIX…
A Brief Look at LD_PRELOAD LD_PRELOAD is an environment variable used by the dynamic linker on UNIX-based systems. Normally the dynamic linker follows a specified search pattern to load various dynamic libraries (shared objects on UNIX).</description>
    </item>
    
    <item>
      <title>Adding Process Hiding to Merlin</title>
      <link>https://forensicitguy.github.io/posts/adding-process-hiding-to-merlin/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://forensicitguy.github.io/posts/adding-process-hiding-to-merlin/</guid>
      <description>Sometimes red team tools need a little bit of extra love to address certain platforms. As I researched Merlin for detection strategies on the blue team side, I noticed that it could use some extra functionality to help replicate what we see in the real world for Linux compromises.
One particular technique that fascinated me was the combination of LD_PRELOAD with libprocesshider to gain a little bit of rootkit functionality and hide processes from casual observers.</description>
    </item>
    
  </channel>
</rss>