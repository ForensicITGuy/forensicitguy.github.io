<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://forensicitguy.github.io/</id><title>Tony Lambert</title><subtitle>Tony's blog about malware analysis and other security topics</subtitle> <updated>2023-01-24T06:42:32+00:00</updated> <author> <name>Tony Lambert</name> <uri>https://forensicitguy.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://forensicitguy.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://forensicitguy.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Tony Lambert </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>BATLoader, Ursnif, and Redline, oh my!</title><link href="https://forensicitguy.github.io/batloader-ursnif-redline-oh-my/" rel="alternate" type="text/html" title="BATLoader, Ursnif, and Redline, oh my!" /><published>2023-01-23T00:00:00+00:00</published> <updated>2023-01-23T00:00:00+00:00</updated> <id>https://forensicitguy.github.io/batloader-ursnif-redline-oh-my/</id> <content src="https://forensicitguy.github.io/batloader-ursnif-redline-oh-my/" /> <author> <name>Tony Lambert</name> </author> <category term="malware" /> <summary> Earlier today, @MalwareHunterTeam posted on Twitter about a malicious MSI file masquerading as a Rufus installer. Searching for &amp;quot;rufus&amp;quot; in Google right now gives 2 ads that are obviously not the official Rufus.2nd one redirect: https://rufus-download[.]software/download-index1.htmlDownload: https://extremebot[.]software/Rufus_3.21.msiSame gang: https://t.co/6spGIxTwbMcc @1ZRR4H @wdor... </summary> </entry> <entry><title>.NET Downloader Leading to OriginLogger</title><link href="https://forensicitguy.github.io/net-downloader-originlogger/" rel="alternate" type="text/html" title=".NET Downloader Leading to OriginLogger" /><published>2023-01-07T00:00:00+00:00</published> <updated>2023-01-07T00:00:00+00:00</updated> <id>https://forensicitguy.github.io/net-downloader-originlogger/</id> <content src="https://forensicitguy.github.io/net-downloader-originlogger/" /> <author> <name>Tony Lambert</name> </author> <category term="malware" /> <summary> Earlier in January, Unit42 and Brad (@malware_traffic) posted tweets with some details on an instance of OriginLogger floating around in the wild. #pcap of the infection traffic, sanitized copy of the email, and with the associated malware are available at: https://t.co/B1wo9XjSQV pic.twitter.com/KoxMLd8K0e&amp;mdash; Brad (@malware_traffic) January 6, 2023 In this post I want to take a look at ... </summary> </entry> <entry><title>Malware Weight Loss the Fast Way with Foremost</title><link href="https://forensicitguy.github.io/malware-weight-loss-fast-foremost/" rel="alternate" type="text/html" title="Malware Weight Loss the Fast Way with Foremost" /><published>2022-10-22T00:00:00+00:00</published> <updated>2022-10-22T00:00:00+00:00</updated> <id>https://forensicitguy.github.io/malware-weight-loss-fast-foremost/</id> <content src="https://forensicitguy.github.io/malware-weight-loss-fast-foremost/" /> <author> <name>Tony Lambert</name> </author> <category term="malware" /> <summary> After writing the last post on bringing malware down to a manageable size for analysis, I got some good feedback on different ways to achieve the same results outside of using pecheck. In this post I’ll go over an alternative method that moves much faster than pecheck which was recommended (and loved) by @AndreGironda. Foremost for the win For this post I’m using the same 300 MB+ sample from... </summary> </entry> <entry><title>Bad Guys Hate This Trick for Malware Weight Loss!</title><link href="https://forensicitguy.github.io/pecheck-malware-weight-loss/" rel="alternate" type="text/html" title="Bad Guys Hate This Trick for Malware Weight Loss!" /><published>2022-10-15T00:00:00+00:00</published> <updated>2022-10-15T20:53:49+00:00</updated> <id>https://forensicitguy.github.io/pecheck-malware-weight-loss/</id> <content src="https://forensicitguy.github.io/pecheck-malware-weight-loss/" /> <author> <name>Tony Lambert</name> </author> <category term="malware" /> <summary> Lately I’ve had to work with multiple malware samples that are extremely heavyweight in size. Usually about 300 MB and above, depending on the sample. This large sample size can significantly hinder analysis with sandboxes due to upload size restrictions, and it can even hinder analysis tools on your local system by causing them to slow down while processing a large file. In this post I’ll go o... </summary> </entry> <entry><title>Analyzing .NET Core Single File Samples (DUCKTAIL Case Study)</title><link href="https://forensicitguy.github.io/analyzing-net-core-single-file-ducktail/" rel="alternate" type="text/html" title="Analyzing .NET Core Single File Samples (DUCKTAIL Case Study)" /><published>2022-08-07T00:00:00+00:00</published> <updated>2022-08-07T00:00:00+00:00</updated> <id>https://forensicitguy.github.io/analyzing-net-core-single-file-ducktail/</id> <content src="https://forensicitguy.github.io/analyzing-net-core-single-file-ducktail/" /> <author> <name>Tony Lambert</name> </author> <category term="malware" /> <summary> This post is dedicated to my colleague Matt Graeber (@mattifestation) who showed me how to do the manual calculations and carving of PEs using CFF Explorer and a hex editor, making me think “there has to be a tool for this”. There are loads of ways to deploy .NET Framework applications, and I’ve mostly been familiar with just the traditional compile-and-run method. As .NET malware has evolved, ... </summary> </entry> </feed>
